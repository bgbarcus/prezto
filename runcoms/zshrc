#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Sourced for interactive shells.

#print "running zshrc"

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Source Vim autowrite plugin support.  Causes autowrite when any command 
# is entered on the command line in a tmux session.  All Vim sessions are 
# signaled to save all buffers.
#
# Still needs work.
# https://github.com/pivotal/tmux-config
#source ~/.vim/bundle/tmux-config/tmux-autowrite/autowrite-vim.sh

# Customize to your needs...

# pipe to multiple outputs
setopt MULTIOS

# change cd to pushd
setopt AUTO_PUSHD

# turn off pushd messages
setopt PUSHD_SILENT

# blank pushd goes to home
setopt PUSHD_TO_HOME

# ten second wait when deleting everything
setopt RM_STAR_WAIT

# use magic (this is the default)
setopt ZLE

# flow control - Ctrl+S
setopt NO_FLOW_CONTROL

# prevent "echo "station" > station from clobbering station
setopt NO_CLOBBER

# other globbing stuff - don't know what these are yet
setopt NUMERIC_GLOB_SORT

# allows       "ls **/**substr**" 
# to work like "find . -type f -name "*substr*" -print"
setopt EXTENDED_GLOB

# vi style incremental search at the command line
bindkey -M vicmd "/" history-incremental-search-backward
bindkey -M vicmd "?" history-incremental-search-forward

# scroll through history after first search match is found
bindkey "^P" history-incremental-search-backward
bindkey "^N" history-incremental-search-forward

# search based on what has already been typed
bindkey -M vicmd "//" history-beginning-search-backward
bindkey -M vicmd "??" history-beginning-search-forward

# recommended without explanation
bindkey -M vicmd "q" push-line

# get completion even with spaces in names
bindkey -M viins ' ' magic-space

#--------------------------------------------
# Enable and setup shell functions like zftp.
fpath=(~/zsh-functions $fpath)
autoload -Uz zfinit zcalc ztodo
zfinit
chpwd() { ztodo }
# Enable and setup shell functions like zftp.
#--------------------------------------------

#
# Remove aliases set by system.
#
unalias gm gmC gmF gma gmt gp gpA gpa gpc gpf gpp 
unalias gpt gr gra grc gri grs gs gsL gsS gsX gsa
unalias gsd gsl gsp gsr gss gsw gsx gwC gwc gwD
unalias gwd gwR gwr gwS gws gwX gwx gCO gCT gCa
unalias gR gRa gRb gRl gRm gRp gRs gRu gRx gS gSI
unalias gSa gSf gSi gSl gSm gSs gSu gSx gb gbL gbM
unalias gbS gbX gbc gbl gbm gbs gbx gc gcF gcO gcP
unalias gcR gca gcf gcl gcm gco gcp gcr gcs gd gdc
unalias gdi gdk gdm gdu gdx gf gfc gfm gfr gg ggL
unalias ggi ggl ggv ggw giA giD giR giX gia gid
unalias gir giu gix gl glb glc gld glg glo gls
unalias gCe gCl gCo gCt
unalias _ 1 2 3 4 5 6 7 8 9 b o p rsync d df du
unalias l l. la lc lk ll lm ln lr ls lt lu lx sl
unalias get mkdir mv pu po

#
# Set aliases.
#
alias hostname="hostname -f"
alias ls="ls -hF"
alias man="pinfo -m"
alias ps="ps --forest"
#alias tig="tig --all"
alias tmux="tmux -u"
alias which="which -a"

unset SSH_ASKPASS

# Add this to .bashrc or its equivalent 
transfer()
{
    if [ $# -eq 0 ]; then 
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
        return 1;
    fi 

    tmpfile=$( mktemp -t transferXXX );

    if tty -s; then
        basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
        curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
    else
        curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ;
    fi;

    cat $tmpfile;
    rm -f $tmpfile; 
} 


# Take over an existing tmux session and push other clients
# to a temporary session.  This allows the window size to
# match the current client.
tmux-takeover()
{
    # create a temporary session that displays the "how to go back" message
    tmp='takeover temp session'

    if ! tmux has-session -t "$tmp"; then
        tmux new-session -d -s "$tmp"
        tmux set-option -t "$tmp" set-remain-on-exit on
        tmux new-window -kt "$tmp":0 \
        'echo "Use Prefix + L (i.e. ^B L) to return to session."'
    fi

    # switch any clients attached to the target session to the temp session
    session="$1"

    for client in $(tmux list-clients -t "$session" | cut -f 1 -d :); do
        tmux switch-client -c "$client" -t "$tmp"
    done

    # attach to the target session
    tmux attach -t "$session"
}
