#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Sourced for interactive shells.
# Should set up aliases, functions, options, key bindings, etc.

#print "running .zshrc"

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Source Vim autowrite plugin support.  Causes autowrite when any command 
# is entered on the command line in a tmux session.  All Vim sessions are 
# signaled to save all buffers.
#
# Still needs work.
# https://github.com/pivotal/tmux-config
#source ~/.vim/bundle/tmux-config/tmux-autowrite/autowrite-vim.sh

# Customize to your needs...

# pipe to multiple outputs
setopt MULTIOS

# change cd to pushd
setopt AUTO_PUSHD

# turn off pushd messages
setopt PUSHD_SILENT

# blank pushd goes to home
setopt PUSHD_TO_HOME

# ten second wait when deleting everything
setopt RM_STAR_WAIT

# use magic (this is the default)
setopt ZLE

# flow control - Ctrl+S
setopt NO_FLOW_CONTROL

# prevent "echo "station" > station from clobbering station
setopt NO_CLOBBER

# other globbing stuff - don't know what these are yet
setopt NUMERIC_GLOB_SORT

# allows       "ls **/**substr**" 
# to work like "find . -type f -name "*substr*" -print"
setopt EXTENDED_GLOB

# vi style incremental search at the command line
bindkey -M vicmd "/" history-incremental-search-backward
bindkey -M vicmd "?" history-incremental-search-forward

# scroll through history after first search match is found
bindkey "^P" history-incremental-search-backward
bindkey "^N" history-incremental-search-forward

# search based on what has already been typed
bindkey -M vicmd "//" history-beginning-search-backward
bindkey -M vicmd "??" history-beginning-search-forward

# recommended without explanation
bindkey -M vicmd "q" push-line

# get completion even with spaces in names
bindkey -M viins ' ' magic-space

#--------------------------------------------
# Enable and setup shell functions like zftp.
fpath=(~/zsh-functions $fpath)
autoload -Uz zfinit zcalc ztodo promptinit
promptinit
prompt josh
zfinit
chpwd() { ztodo }
# Enable and setup shell functions like zftp.
#--------------------------------------------

#--------------------------------------------
# Add git-flow completions to the shell.
#--------------------------------------------
source ~/src/git-flow-completion/git-flow-completion.zsh
#--------------------------------------------

unalias rm

alias which="which -a"
alias hostname="hostname -f"
alias ls="ls -hF"
alias man="pinfo -m"
alias ps="ps --forest"
alias tmux="tmux -u"
alias setclip="/usr/bin/xclip -selection c"
alias getclip="/usr/bin/xclip -selection clipboard -o"
#alias rdesktop="/usr/bin/rdesktop -g 1280x1024"

##################################################################################################
# zsh functions
# Copied from http://zsh.sourceforge.net/Contrib/startup/users/debbiep/dot.zshenv
#
# Most functions are auto-loaded later on, but some are defined
# explicitly since they're needed by the startup files and would
# automatically be loaded in any case.
##################################################################################################
# rationalize-path()
# Later we'll need to trim down the paths that follow because the ones given
# here are for all my accounts, some of which have unusual paths in them.
# rationalize-path will remove nonexistent directories from an array.
rationalize-path()
{             
	# Note that this works only on arrays, not colon-delimited strings.
	# Not that this is a problem now that there is typeset -T.
	local element
	local build
	build=()

	# Evil quoting to survive an eval and to make sure that
	# this works even with variables containing IFS characters, if I'm
	# crazy enough to setopt shwordsplit.
	eval '
		foreach element in "$'"$1"'[@]"
		do
			if [[ -d "$element" ]]
			then
  	  			build=("$build[@]" "$element")
			fi
		done
		'"$1"'=( "$build[@]" )
	'
}
##################################################################################################
# zsh-version
# Return true (0) if the running version of ZSH is equal to or more recent than 
# the one requested.  I need this because of all the bleeding-edge zsh features 
# I use here. :)  Cache the results for speed, if associative arrays are 
# available.  The zsh distribution comes with the is-at-least function to do the
# same job, but I'd already written this before I found that out. :)
zsh-version()
{
	# If this result is cached . . 
	if [[ ${+zshversioncache} -eq 1 && ${+zshversioncache[$1]} -eq 1 ]]
	then
		return $zshversioncache[$1]
	fi

	local running
	local wanted

	# Split the things to compare into two arrays.
	running=(${(s:.:)ZSH_VERSION})
	wanted=(${(s:.:)1})

	# Compare parts until we have an answer.
	while [[ $#running -gt 0 ]]
	do
		# Now compare each first part.
		if [[ $running[1] -lt $wanted[1] ]]
		then
  	  		if [[ ${+zshversioncache} -eq 1 ]]
  	  		then
     	 		zshversioncache[$1]=1
  	  		fi
  	  		return 1    # Failure, want more recent than we have
		elif [[ $running[1] -gt $wanted[1] ]]
		then
  	  		if [[ ${+zshversioncache} -eq 1 ]]
  	  		then
     	 		zshversioncache[$1]=0
  	  		fi
  	  		return 0    # Success, running newer version
		else
  	  		shift running  # Look at next part of version
  	  		shift wanted
		fi
	done
	if [[ $#wanted -gt 0 ]]
	then
		if [[ ${+zshversioncache} -eq 1 ]]
		then
   	   		zshversioncache[$1]=1
		fi
		return 1  # Failure, wanted version has an extra part and is thus later
	else
		if [[ ${+zshversioncache} -eq 1 ]]
		then
   	   		zshversioncache[$1]=0
		fi
		return 0  # Exactly the same version
	fi
}

if zsh-version 3.1.6
then
	# Associative arrays are available.
	typeset -A zshversioncache
	zshversioncache=( )
fi
#
# End of functions copied from http://zsh.sourceforge.net/Contrib/startup/users/debbiep/dot.zshenv
##################################################################################################

#------------------------------------------------
# Copied from instructions on https://transfer.sh
# send file to https://transfer.sh
#------------------------------------------------
transfer()
{
    if [ $# -eq 0 ]; then 
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
        return 1;
    fi 

    tmpfile=$( mktemp -t transferXXX );

    if tty -s; then
        basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
        curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
    else
        curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ;
    fi;

    cat $tmpfile;
    rm -f $tmpfile; 
} 

# Take over an existing tmux session and push other clients
# to a temporary session.  This allows the window size to 
# match the current client.
tmux-takeover()
{
    # create a temporary session that displays the "how to go back" message
    tmp='takeover temp session'

    if ! tmux has-session -t "$tmp"; then
        tmux new-session -d -s "$tmp"
        tmux set-option -t "$tmp" set-remain-on-exit on
        tmux new-window -kt "$tmp":0 \
        'echo "Use Prefix + L (i.e. ^B L) to return to session."'
    fi

    # switch any clients attached to the target session to the temp session
    session="$1"

    for client in $(tmux list-clients -t "$session" | cut -f 1 -d :); do
        tmux switch-client -c "$client" -t "$tmp"
    done

    # attach to the target session
    tmux attach -t "$session"
}
